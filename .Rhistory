latex(anova(f2), file='', label = 'tab:caxcase-anova1')
###
latex(anova(f2), file='', label = 'tab:coxcase-anova1')
###
latex(anova(f), file='', label = 'tab:coxcase-anova1')
###
latex(anova(f),file='',label='tab:coxcase-anova1')
print(f2, latex = TRUE, coefs = TRUE)
## Compare reduced models with survival model and compare AIC with full model ##
# new model
f2 = cph(S ~ rx + rcs(age, 4) + rcs(wt, 3) + pf.coded + heart + rcs(map,3) +
rcs(hg, 4) + rcs(sg, 3) + rcs(sz, 3) + rcs(log(ap), 5) + bm,
x = TRUE, y = TRUE, surv = TRUE, time.inc = 5*12)
print(f2, latex = TRUE, coefs = TRUE)
## Compare reduced models with survival model and compare AIC with full model ##
# new model
f2 = cph(S ~ rx + age + rcs(age, 4) + rcs(wt, 3) + pf.coded + heart + rcs(map,3) +
rcs(hg, 4) + rcs(sg, 3) + rcs(sz, 3) + rcs(log(ap), 5) + bm,
x = TRUE, y = TRUE, surv = TRUE, time.inc = 5*12)
## Compare reduced models with survival model and compare AIC with full model ##
# new model
f2 = cph(S ~ rx + age + rcs(wt, 3) + pf.coded + heart + rcs(map,3) +
rcs(hg, 4) + rcs(sg, 3) + rcs(sz, 3) + rcs(log(ap), 5) + bm,
x = TRUE, y = TRUE, surv = TRUE, time.inc = 5*12)
print(f2, latex = TRUE, coefs = TRUE)
## Compare reduced models with survival model and compare AIC with full model ##
# new model
f2 = cph(S ~ rx + rcs(age,3) + rcs(wt, 3) + pf.coded + heart + rcs(map,3) +
rcs(hg, 4) + rcs(sg, 3) + rcs(sz, 3) + rcs(log(ap), 5) + bm,
x = TRUE, y = TRUE, surv = TRUE, time.inc = 5*12)
print(f2, latex = TRUE, coefs = TRUE)
120.1-2*24 = 68.1
120.1-2*24
72.1-63.02
latex(anova(f2), file='', label = 'tax:coccase-anova1')
latex(anova(f2), file='', label = age)
predict(f, type = 'terms')
predict(f, type =ekg)
predict(f, type = 'terms')
predict(f2, type = 'terms')
z = predict(f2, type = 'terms')
f.short = cph(S ~ z, X = TRUE, y= TRUE)
f.short
## Compute shoenfields residuals for each variable
phtest = cox.zph(f.short, transform = 'identity')
phtest
z = predict(f2, type = 'terms')
f.short = cph(S ~ z, X = TRUE, y= TRUE)
## Compute shoenfields residuals for each variable
phtest = cox.zph(f.short, transform = 'identity')
phtest
plot(phtest, var='rx')
plot(phtest, var=age)
plot(phtest, var=GLOBAL)
plot(phtest, var='GLOBAL')
f.short = cph(S ~ z, x = TRUE, y= TRUE)
f.short
## Compute shoenfields residuals for each variable
phtest = cox.zph(f.short, transform = 'identity')
phtest
z = predict(f2, type = 'terms')
f.short = cph(S ~ z, x = TRUE, y= TRUE)
## Compute shoenfields residuals for each variable
phtest = cox.zph(f.short, transform = 'identity')
phtest
z = predict(f, type = 'terms')
z = predict(f, type = 'terms')
z = predict(f2, type = 'terms')
f.short = cph(S ~ z, x = TRUE, y= TRUE)
## Compute shoenfields residuals for each variable
phtest = cox.zph(f.short, transform = 'identity')
phtest
plot(phtest, var='GLOBAL')
getHdata(prostate)
#combine two levels in EKG column
levels(prostate$ekg)[levels(prostate$ekg) %in% c('old MI', 'recent MI')] = 'MI'
#new column that converts pf data into intger values (1 to 4)
prostate$pf.coded = as.integer(prostate$pf)
# Merge last two levels (levels 3 and 4 as 3)
levels(prostate$pf.coded) = c(levels(prostate$pf.coded)[1:3], levels(prostate$pf.coded)[3])
# explore the data
# total number of patients
nrow(prostate)
# number alive and dead
prostate %>% count(status)
sum(prostate$status != 'alive', na.rm=TRUE)
# is there missing values?????
tibble(prostate) %>%
filter(if_any(everything(), is.na)) # 27 rows with missing data
w = transcan(~ sz + sg + ap + sbp + dbp + age + wt + hg + ekg + pf + bm + hx,
imputed = TRUE, data = prostate, pl = FALSE, pr = FALSE)
attach(prostate)
sz = impute(w, sz, data = prostate)
sg = impute(w, sg, data = prostate)
age = impute(w, age, data = prostate)
wt = impute(w, wt, data = prostate)
ekg = impute(w, ekg, data = prostate)
dd = datadist(prostate); options(datadist = 'dd')
units(dtime) = 'Month'
### test whether full model (survival) is appropriate
S = Surv(dtime, status != 'alive')
f = cph(S ~ rx + rcs(age, 4) + rcs(wt, 4) + pf + hx + rcs(sbp, 4) + rcs(dbp, 4) +
ekg + rcs(hg, 4) + rcs(sg, 4) + rcs(sz, 4) + rcs(log(ap), 4) + bm)
print(f, latex = TRUE, coefs = FALSE)
heart = hx + ekg %nin% c('normal', 'benign') ###combining variables
label(heart) = 'Heart Disease Code'
map = (2*dbp+sbp)/3
label(map) = 'Mean Arterial Pressure/10' ##comnining vairables
dd = datadist(dd, heart, map) # add combined variables to datadist(dd)
## Compare reduced models with survival model and compare AIC with full model ##
# new model
f2 = cph(S ~ rx + rcs(age,3) + rcs(wt, 3) + pf.coded + heart + rcs(map,3) +
rcs(hg, 4) + rcs(sg, 3) + rcs(sz, 3) + rcs(log(ap), 5) + bm,
x = TRUE, y = TRUE, surv = TRUE, time.inc = 5*12)
print(f2, latex = TRUE, coefs = TRUE)
## Test that all variables are linear ###
latex(anova(f2), file='', label = 'tax:coccase-anova1')
z = predict(f2, type = 'terms')
f.short = cph(S ~ z, x = TRUE, y= TRUE)
## Compute shoenfields residuals for each variable
phtest = cox.zph(f.short, transform = 'identity')
phtest
z[,'rx']
z[,-'rx']
z[,-1
]
z[,-1]
??dose
?dose
?dose()
plot(phtest, var = 'rx')
f.short = cph(S ~ z, x = TRUE, y= TRUE)
f.short
## Compute shoenfields residuals for each variable
phtest = cox.zph(f.short, transform = 'identity')
phtest
z = predict(f2)
f.short = cph(S ~ z, x = TRUE, y= TRUE)
f.short
## compare model
#
f.ia = cph(S ~ z.dose * z.other)
#######################
# testing interactions
z.dose = z[,'rx'] or # z[,1] get column rx (dose)
z.other = z[-1] #all other columns
## compare model
#
f.ia = cph(S ~ z.dose * z.other)
#######################
# testing interactions
z.dose = z[,'rx']  # z[,1] get column rx (dose)
#######################
# testing interactions
z.dose = z[,"1"]  # z[,1] get column rx (dose)
z.other = z[-1] #all other columns
#######################
# testing interactions
z.dose = z[,"rx"]  # z[,1] get column rx (dose)
#######################
# testing interactions
z.dose = z[,1]  # z[,1] get column rx (dose)
#######################
# testing interactions
z.dose = z[, 1]  # z[,1] get column rx (dose)
z.other
z.other = z[, -1] #all other columns
#######################
# testing interactions
z.dose = z[, 2]  # z[,1] get column rx (dose)
detach("package:tidyr", unload = TRUE)
detach("package:tidyverse", unload = TRUE)
detach("package:tibble", unload = TRUE)
detach("package:stringr", unload = TRUE)
detach("package:purrr", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
#######################
# testing interactions
z.dose = z[, 2]  # z[,1] get column rx (dose)
#######################
# testing interactions
tibble(z)
z = predict(f2, type = 'terms')
z
f.short = cph(S ~ z, x = TRUE, y= TRUE)
#######################
# testing interactions
tibble(z)
z.dose = z[, 1]  # z[,1] get column rx (dose)
z.other = z[, -1] #all other columns
## compare model
#
f.ia = cph(S ~ z.dose * z.other)
z.dose
z.other
f.short = cph(S ~ z, x = TRUE, y= TRUE)
## Compute shoenfields residuals for each variable
phtest = cox.zph(f.short, transform = 'identity')
phtest
plot(phtest, var = 'rx')
latex(anova(f2), file='', label = 'coxcase-anova1')
latex(anova(f2), file='', label = 'tab:coxcase-anova1')
f.short
f2
print(f2, latex = TRUE, coefs = 3)
phtest
print(f2, latex = TRUE, coefs = TRUE)
## Compute shoenfields residuals for each variable
phtest = cox.zph(f.short, transform = 'identity')
phtest
phtest
############################################
##### Checking Proportional Hazard ##########
# Note there are multiple regression coefficients per predictor
# (for example different knots)
# As such compare model where all variables have only 1 df by using predict()
z = tibble(z)
z = tibble(predict(f2, type = 'terms'))
z
f.short = cph(S ~ z, x = TRUE, y= TRUE)
f.short = cph(tibble(S) ~ z, x = TRUE, y= TRUE)
z = model.matrix(predict(f2, type = 'terms'))
z = predict(f2, type = 'terms')
f.short = cph(tibble(S) ~ z, x = TRUE, y= TRUE)
z = predict(f2, type = 'terms')
f.short = cph(tibble(S) ~ z, x = TRUE, y= TRUE)
z
f.short = cph(S ~ z, x = TRUE, y= TRUE)
## Compute shoenfields residuals for each variable
phtest = cox.zph(f.short, transform = 'identity')
phtest
plot(phtest, var = 'rx')
f.short
## Compute shoenfields residuals for each variable
# test the proportional hazard assumption using the cox.zph() function
phtest = cox.zph(f.short, transform = 'rank')
phtest
z = predict(f2, type = 'response')
z = predict(f2, type = 'response')
z = predict(f2, type = 'lp')
z
z = predict(f2, type = 'terms')
z
f.short = cph(S ~ z, x = TRUE, y= TRUE)
f.short
## Compute shoenfields residuals for each variable
# test the proportional hazard assumption using the cox.zph() function
phtest = cox.zph(f.short, transform = 'rank')
phtest
## Compute shoenfields residuals for each variable
# test the proportional hazard assumption using the cox.zph() function
phtest = cox.zph(f.short, transform = 'identity')
phtest
plot(phtest, var = 'rx')
## Compute shoenfields residuals for each variable
# test the proportional hazard assumption using the cox.zph() function
phtest = cox.zph(tibble(f.short), transform = 'identity')
phtest
f.short
S
100.2/136.2
phtest
z = predict(f2, type = 'terms')
f.short = cph(S ~ z, x = TRUE, y= TRUE)
## Compute shoenfields residuals for each variable
# test the proportional hazard assumption using the cox.zph() function
phtest = cox.zph(f.short, transform = 'identity')
phtest
f.short
## Compute shoenfields residuals for each variable
# test the proportional hazard assumption using the cox.zph() function
phtest = cox.zph(f.short, transform = 'identity')
phtest
#
ggplot(predict(f2))
#
ggplot(predict(f2), sepdiscrete='vertical', nlevels=4, vnames='names')
require(rms)
##################
#import test data#
##################
getHdata(prostate)
#combine two levels in EKG column
levels(prostate$ekg)[levels(prostate$ekg) %in% c('old MI', 'recent MI')] = 'MI'
#new column that converts pf data into intger values (1 to 4)
prostate$pf.coded = as.integer(prostate$pf)
# Merge last two levels (levels 3 and 4 as 3)
levels(prostate$pf.coded) = c(levels(prostate$pf.coded)[1:3], levels(prostate$pf.coded)[3])
####################
# explore the data #
####################
# total number of patients
nrow(prostate)
# number alive and dead
prostate %>% count(status)
sum(prostate$status != 'alive', na.rm=TRUE)
# is there missing values?????
tibble(prostate) %>%
filter(if_any(everything(), is.na)) # 27 rows with missing data
# predict missing values based on other scores
w = transcan(~ sz + sg + ap + sbp + dbp + age + wt + hg + ekg + pf + bm + hx,
imputed = TRUE, data = prostate, pl = FALSE, pr = FALSE)
attach(prostate)
sz = impute(w, sz, data = prostate)
sg = impute(w, sg, data = prostate)
age = impute(w, age, data = prostate)
wt = impute(w, wt, data = prostate)
ekg = impute(w, ekg, data = prostate)
dd = datadist(prostate); options(datadist = 'dd')
units(dtime) = 'Month'
# create survival object based of time of death
S = Surv(dtime, status != 'alive')
# perform a cox proportional hazard model on all variables, use restricted cubic
# spline for certain variables
#
f = cph(S ~ rx + rcs(age, 4) + rcs(wt, 4) + pf + hx + rcs(sbp, 4) + rcs(dbp, 4) +
ekg + rcs(hg, 4) + rcs(sg, 4) + rcs(sz, 4) + rcs(log(ap), 4) + bm)
print(f, latex = TRUE, coefs = FALSE)
heart = hx + ekg %nin% c('normal', 'benign') ###combining variables
label(heart) = 'Heart Disease Code'
map = (2*dbp+sbp)/3
label(map) = 'Mean Arterial Pressure/10' ##comnining vairables
dd = datadist(dd, heart, map) # add combined variables to datadist(dd)
################################################################################
## Compare reduced models with survival model and compare AIC with full model ##
################################################################################
# new model
f2 = cph(S ~ rx + rcs(age,3) + rcs(wt, 3) + pf.coded + heart + rcs(map,3) +
rcs(hg, 4) + rcs(sg, 3) + rcs(sz, 3) + rcs(log(ap), 5) + bm,
x = TRUE, y = TRUE, surv = TRUE, time.inc = 5*12)
print(f2, latex = TRUE, coefs = TRUE)
## Test that all variables are linear ###
latex(anova(f2), file='', label = 'tax:coccase-anova1')
z = predict(f2, type = 'terms')
f.short = cph(S ~ z, x = TRUE, y= TRUE)
## Compute shoenfields residuals for each variable
# test the proportional hazard assumption using the cox.zph() function
phtest = cox.zph(f.short, transform = 'identity')
phtest
plot(phtest, var = 'rx')
z.dose = z[, 1]  # z[,1] get column rx (dose)
z.other = z[, -1] #all other columns
## compare model
#
f.ia = cph(S ~ z.dose * z.other)
latex(anova(f2), file='', label = 'tab:coxcase-anova1')
#
ggplot(predict(f2), sepdiscrete='vertical', nlevels=4, vnames='names')
require(rms)
############
# get data #
############
getHdata(kprats)
View(kprats)
S = with(Kprats, Surv(t, death))
S = with(kprats, Surv(t, death))
S
s1 = Surv(t, death)
S = Surv(kprats$dtime, kprats$death)
S = Surv(kprats$t, kprats$death)
S
f = npsurv(S ~ group, type = 'fleming', data = kprats)
f
survplot(f)
f2 = npsurv(S ~ group, type = 'kap
', data = kprats)
?npsurv
f2 = npsurv(S ~ group, type = 'interval', data = kprats)
survplot(f, n.risk = TRUE, conf = 'none')
survplot(f, n.risk = TRUE, conf = 'none',
label.curves = list(keys='lines'),
levels.only = TRUE)
f
group = c(rep('Group 1', 19), rep('Group 2', 21))
group
group = factor(group)
dd=datadist(group)
View(dd)
dd=datadist(group); options(datadist = 'dd')
S
dd = datadist(kprats); options(datadist = 'dd')
units(t) = 'Day'
t
dd = datadist(kprats); options(datadist = 'dd')
S2 = Surv(t, death)
View(dd)
dd = datadist(kprats); options(datadist = 'dd')
units(t) = 'Day'
S2 = Surv(t, kprats$death )
# Create survival object
S = Surv(kprats$t, kprats$death)
# compute survival curve estimate
f = npsurv(S ~ group, type = 'fleming')
f
f2 = npsurv(S ~ group, type = 'fleming', data = kprats)
f2
# Plot curve (exclude confidence intervals)
survplot(f, n.risk = TRUE, conf = 'none',
label.curves = list(keys='lines'),
levels.only = TRUE)
g = cph(S ~ group, method = meth, surv = TRUE, x = TRUE, y = TRUE)
# loop to through different methods for determing baseline survival function in COX PH
for(meth in c('exact', 'breslow', 'efron')) {
g = cph(S ~ group, method = meth, surv = TRUE, x = TRUE, y = TRUE)
}
# Create survival object
S = Surv(kprats$t, kprats$death)
# compute survival curve estimate
f = npsurv(S ~ group, type = 'fleming')
# Plot curve (exclude confidence intervals)
survplot(f, n.risk = TRUE, conf = 'none',
label.curves = list(keys='lines'),
levels.only = TRUE)
# loop to through different methods for determing baseline survival function in COX PH
for(meth in c('exact', 'breslow', 'efron')) {
g = cph(S ~ group, method = meth, surv = TRUE, x = TRUE, y = TRUE)
}
# Create survival object
S = Surv(t, death)
############
# get data #
############
getHdata(kprats)
dd = datadist(kprats); options(datadist = 'dd')
units(t) = 'Day'
# Create survival object
S = Surv(t, death)
# Create survival object
S = Surv(kprats$t, kprats$death)
# compute survival curve estimate
f = npsurv(S ~ group, type = 'fleming')
# compute survival curve estimate
f = npsurv(S ~ group, type = 'fleming', data = kprats)
# Plot curve (exclude confidence intervals)
survplot(f, n.risk = TRUE, conf = 'none',
label.curves = list(keys='lines'),
levels.only = TRUE)
# loop to through different methods for determing baseline survival function in COX PH
for(meth in c('exact', 'breslow', 'efron')) {
g = cph(S ~ group, method = meth, surv = TRUE, x = TRUE, y = TRUE)
}
g = cph(S ~ group, method = meth, surv = TRUE, x = TRUE, y = TRUE, data = kprats)
View(kprats)
View(g)
View(g)
print(g)
# loop to through different methods for determing baseline survival function in COX PH
for(meth in c('exact', 'breslow', 'efron')) {
g = cph(S ~ group, method = meth, surv = TRUE, x = TRUE, y = TRUE, data = kprats)
}
f.exp = psm(S ~ group, dist = 'exponential')
f.exp = psm(S ~ group, dist = 'exponential', data = kprats)
f.exp
?psm
fw = psm(S ~ group dist = 'weibull', data = kprats)
fw = psm(S ~ group, dist = 'weibull', data = kprats)
?pphsm
?psm
?pphsm
#paramateric proportial hazard form of AFT models?
phform = pphsm(fw)
fw = psm(S ~ group, dist = 'weibull', data = kprats)
#paramateric proportial hazard form of AFT models?
phform = pphsm(fw)
phform
#paramateric proportial hazard form of AFT models?
phform = pphsm(f.exp)
phform
#paramateric proportial hazard form of AFT models?
phform = pphsm(fw)
co = gray(c(0, .8))
survplot(f, lty=c(1,1), lwd=c(1,3), col=co)
survplot(f, lty=c(1,1), lwd=c(1,3), col=co, label.curves = FALSE, conf = 'none')
survplot(g, lty=c(3,3), lwd=c(1,3), col=co, label.curves = FALSE, conf = 'none')
survplot(g, lty=c(3,3), lwd=c(1,3), col=co, label.curves = FALSE, conf = 'none')
survplot(f, lty=c(1,1), lwd=c(1,3), col=co, label.curves = FALSE, conf = 'none', add = TRUE)
survplot(g, lty=c(3,3), lwd=c(1,3), col=co, label.curves = FALSE, conf = 'none')
print(g)
survplot(f, lty=c(1,1), lwd=c(1,3), col=co, label.curves = FALSE, conf = 'none', add = TRUE)
survplot(g, lty=c(3,3), lwd=c(1,3), col=co, label.curves = FALSE, conf = 'none')
survplot(f, lty=c(1,1), lwd=c(1,3), col=co, label.curves = FALSE, conf = 'none', add = TRUE)
survplot(f, lty=c(1,1), lwd=c(1,3), col=co, label.curves = FALSE, conf = 'none', add = TRUE)
co = gray(c(0, .8))
survplot(f, lty=c(1,1), lwd=c(1,3), col=co, label.curves = FALSE, conf = 'none', add = TRUE)
survplot(f, lty=c(1,1), lwd=c(1,3), col=co, label.curves = FALSE, conf = 'none')
survplot(g, lty=c(3,3), lwd=c(1,3), col=co, label.curves = FALSE, conf = 'none')
survplot(f, lty=c(1,1), lwd=c(1,3), col=co, label.curves = FALSE, conf = 'none')
survplot(g, lty=c(3,3), lwd=c(1,3), col=co, label.curves = FALSE, conf = 'none', add = TRUE)
survplot(g, lty=c(3,3), lwd=c(1,3), col=co, add = TRUE, label.curves = FALSE, conf.type = 'none')
legend(c(2, 160), c(.38,.54), c('Non parametric Estimates', 'Cox-Breslow Estimates'))
legend(c(2,160), c(.18,.34), cex = .8, c('Group 1', 'Group 2'), lwd=c(1,3), col=co, bty='n')
legend(c(2, 160), c(.38,.54), c('Non parametric Estimates', 'Cox-Breslow Estimates'), lty = c(1,3), cex = .8, bty = 'n')
# plot survival curve using parametric (f) and cox (g) proportional hazard models
co = gray(c(0, .8))
survplot(f, lty=c(1,1), lwd=c(1,3), col=co, label.curves = FALSE, conf = 'none')
survplot(g, lty=c(3,3), lwd=c(1,3), col=co, add = TRUE, label.curves = FALSE, conf.type = 'none')
legend(c(2, 160), c(.38,.54), c('Non parametric Estimates', 'Cox-Breslow Estimates'), lty = c(1,3), cex = .8, bty = 'n')
legend(c(2,160), c(.18,.34), cex = .8, c('Group 1', 'Group 2'), lwd=c(1,3), col=co, bty='n')
require(ISRL2)
install.packages(ISRL2)
install.packages('ISRL2')
require(ISLR2)
install.packages('ISLR2')
require(ISLR2)
names(BrainCancer)
names(BrainCancer)
table(sex)
read.table('BrainCancer')
read.table('BrainCancer.data')
read.table('auto.data')
Auto = read.table('Auto.data')
