lines(yy.xx$fit -
qt(0.975, yy.xx$df)*yy.xx$se.fit ~ xx.list, lty=2)
lines(yy.xx$fit +
qt(0.975, yy.xx$df)*yy.xx$se.fit ~ xx.list, lty=2)
}
result.0.coxph <- coxph(Surv(time, status) ~ 1, data = Publication)
rr.0 <- residuals(result.0.coxph, type="martingale")
###### budget
plot(rr.0 ~ budget, data = Publication) +
smoothSEcurve(rr.0, budget) +
title("Martingale residuals\nversus budget") +
abline(h=0, col = 2)
### budget data needs transforming to log form ####
plot(rr.0 ~ logbudget, data = Publication) +
smoothSEcurve(rr.0, Publication$logbudget) +
title("Martingale residuals\nversus budget") +
abline(h=0, col = 2)
###### impact ######
plot(rr.0 ~ impact, data = Publication) +
smoothSEcurve(rr.0, impact) +
title("Martingale residuals\nversus budget") +
abline(h=0, col = 2)
### budget data needs transforming to log form ####
plot(rr.0 ~ logimpact, data = Publication) +
smoothSEcurve(rr.0, Publication$impact) +
title("Martingale residuals\nversus budget") +
abline(h=0, col = 2)
plot(predict(f.nearfull3), residuals(f.nearfull3, type = 'martingale'),
xlab = 'fitted values', ylab = 'Martingale residuals',
main = 'Residual Plot', las = 1) +
abline(h=0) +
lines(smooth.spline(predict(f.nearfull3),
residuals(f.nearfull3, type = 'martingale')), col = 'red')
plot(predict(coxph(Surv(time, status) ~ log(budget))), residuals(coxph(Surv(time, status) ~ log(budget)), type = 'martingale'),
xlab = 'fitted values', ylab = 'Martingale residuals',
main = 'Residual Plot', las = 1) +
abline(h=0) +
lines(smooth.spline(predict(coxph(Surv(time, status) ~ log(budget))),
residuals(coxph(Surv(time, status) ~ log(budget)), type = 'martingale')), col = 'red')
##################
#import test data#
##################
getHdata(prostate)
#combine two levels in EKG column
levels(prostate$ekg)[levels(prostate$ekg) %in% c('old MI', 'recent MI')] = 'MI'
#new column that converts pf data into intger values (1 to 4)
prostate$pf.coded = as.integer(prostate$pf)
# Merge last two levels (levels 3 and 4 as 3)
levels(prostate$pf.coded) = c(levels(prostate$pf.coded)[1:3], levels(prostate$pf.coded)[3])
####################
# explore the data #
####################
# total number of patients
nrow(prostate)
# number alive and dead
prostate %>% count(status)
sum(prostate$status != 'alive', na.rm=TRUE)
table(prostate$status)
table(status)
attach(prostate)
# number alive and dead
prostate %>% count(status)
table(status)
# is there missing values?????
tibble(prostate) %>%
filter(if_any(everything(), is.na)) # 27 rows with missing data
# predict missing values based on other scores
w = transcan(~ sz + sg + ap + sbp + dbp + age + wt + hg + ekg + pf + bm + hx,
imputed = TRUE, data = prostate, pl = FALSE, pr = FALSE)
attach(prostate)
sz = impute(w, sz, data = prostate)
sg = impute(w, sg, data = prostate)
age = impute(w, age, data = prostate)
wt = impute(w, wt, data = prostate)
ekg = impute(w, ekg, data = prostate)
dd = datadist(prostate); options(datadist = 'dd')
units(dtime) = 'Month'
prostate
# is there missing values?????
tibble(prostate) %>%
filter(if_any(everything(), is.na)) # 27 rows with missing data
w = transcan(~ sz + sg + ap + sbp + dbp + age + wt + hg + ekg + pf + bm + hx,
imputed = TRUE, trantab=TRUE,data = prostate, pl = FALSE, pr = FALSE)
attach(prostate)
sz = impute(w, sz, data = prostate)
sg = impute(w, sg, data = prostate)
age = impute(w, age, data = prostate)
wt = impute(w, wt, data = prostate)
ekg = impute(w, ekg, data = prostate)
dd = datadist(prostate); options(datadist = 'dd')
units(dtime) = 'Month'
# is there missing values?????
tibble(prostate) %>%
filter(if_any(everything(), is.na)) # 27 rows with missing data
##** you can then plot the transformations to see the strength of the associations of
##*each variable with all the others. If the R^2 is small, it means the variable is mostly predicted
##*by their median or modal values from the marginal distribution
windows();ggplot(w,scale=TRUE)+theme(axis.text.x=element_text(size=6))
# perform a cox proportional hazard model on all variables, use restricted cubic
# spline for certain variables
#
f = cph(S ~ rx + rcs(age, 4) + rcs(wt, 4) + pf + hx + rcs(sbp, 4) + rcs(dbp, 4) +
ekg + rcs(hg, 4) + rcs(sg, 4) + rcs(sz, 4) + rcs(log(ap), 4) + bm)
# create survival object based of time of death
S = Surv(dtime, status != 'alive')
# perform a cox proportional hazard model on all variables, use restricted cubic
# spline for certain variables
#
f = cph(S ~ rx + rcs(age, 4) + rcs(wt, 4) + pf + hx + rcs(sbp, 4) + rcs(dbp, 4) +
ekg + rcs(hg, 4) + rcs(sg, 4) + rcs(sz, 4) + rcs(log(ap), 4) + bm)
print(f, latex = TRUE, coefs = FALSE)
summary(w)
windows();ggplot(w,scale=TRUE)+theme(axis.text.x=element_text(size=6))
# create survival object based of time of death
S = Surv(dtime, status != 'alive')
# perform a cox proportional hazard model on all variables, use restricted cubic
# spline for certain variables
#
f = cph(S ~ rx + rcs(age, 4) + rcs(wt, 4) + pf + hx + rcs(sbp, 4) + rcs(dbp, 4) +
ekg + rcs(hg, 4) + rcs(sg, 4) + rcs(sz, 4) + rcs(log(ap), 4) + bm)
print(f, latex = TRUE, coefs = FALSE)
anova(f)
################################################################################
## Compare reduced models with survival model and compare AIC with full model ##
################################################################################
# new model
f2 = cph(S ~ rx + rcs(age,3) + rcs(wt, 3) + pf.coded + heart + rcs(map,3) +
rcs(hg, 4) + rcs(sg, 3) + rcs(sz, 3) + rcs(log(ap), 5) + bm,
x = TRUE, y = TRUE, surv = TRUE, time.inc = 5*12)
heart = hx + ekg %nin% c('normal', 'benign') ###combining variables
label(heart) = 'Heart Disease Code'
map = (2*dbp+sbp)/3
label(map) = 'Mean Arterial Pressure/10' ##comnining vairables
dd = datadist(dd, heart, map) # add combined variables to datadist(dd)
################################################################################
## Compare reduced models with survival model and compare AIC with full model ##
################################################################################
# new model
f2 = cph(S ~ rx + rcs(age,3) + rcs(wt, 3) + pf.coded + heart + rcs(map,3) +
rcs(hg, 4) + rcs(sg, 3) + rcs(sz, 3) + rcs(log(ap), 5) + bm,
x = TRUE, y = TRUE, surv = TRUE, time.inc = 5*12)
print(f2, latex = TRUE, coefs = TRUE)
## Test that all variables are linear ###
latex(anova(f2), file='', label = 'tab:coccase-anova1')
#cant get above code to work
##* This is a known bug. This instruction should be issued before the command:
##* However note that issuing this command will change ALL of the outputs to LaTeX
##* so beware!
options(prType='latex') # options(prType='plain') to restore the default
## Test that all variables are linear ###
latex(anova(f2), file='', label = 'tab:coccase-anova1')
# 3) would the next step be to investigate which variables are significant in
#   this model and remove those which are not accordingly?
##* you could issue this command to see the strength of association of each predictor
##* and whether nonlinearities are warranted. Overall, there is evidence of nonlinearities
##* of some predictors, and also no evidence of association for some others (e.g. sbp, sg)
anova(f)
# 3) would the next step be to investigate which variables are significant in
#   this model and remove those which are not accordingly?
##* you could issue this command to see the strength of association of each predictor
##* and whether nonlinearities are warranted. Overall, there is evidence of nonlinearities
##* of some predictors, and also no evidence of association for some others (e.g. sbp, sg)
anova(f)
options(prType='plain')
# 3) would the next step be to investigate which variables are significant in
#   this model and remove those which are not accordingly?
##* you could issue this command to see the strength of association of each predictor
##* and whether nonlinearities are warranted. Overall, there is evidence of nonlinearities
##* of some predictors, and also no evidence of association for some others (e.g. sbp, sg)
anova(f)
smoothSEcurve <- function(yy, xx) {
# use after a call to "plot"
# fit a lowess curve and 95% confidence interval curve
# make list of x values
xx.list <- min(xx) + ((0:100)/100)*(max(xx) - min(xx))
# Then fit loess function through the points (xx, yy)
# at the listed values
yy.xx <- predict(loess(yy ~ xx), se=T,
newdata=data.frame(xx=xx.list))
lines(yy.xx$fit ~ xx.list, lwd=2)
lines(yy.xx$fit -
qt(0.975, yy.xx$df)*yy.xx$se.fit ~ xx.list, lty=2)
lines(yy.xx$fit +
qt(0.975, yy.xx$df)*yy.xx$se.fit ~ xx.list, lty=2)
}
result.0.coxph <- coxph(S ~ 1, data = prostate)
rr.0 <- residuals(result.0.coxph, type="martingale")
###### budget
plot(rr.0 ~ age, data = prostate) +
smoothSEcurve(rr.0, age) +
title("Martingale residuals\nversus budget") +
abline(h=0, col = 2)
result.0.coxph <- coxph(S ~ 1, data = prostate)
rr.0 <- residuals(result.0.coxph, type="martingale")
###### budget
plot(rr.0 ~ age, data = prostate) +
smoothSEcurve(rr.0, age) +
title("Martingale residuals\nversus budget") +
abline(h=0, col = 2)
result.0.coxph
rr.0
###### budget
plot(rr.0 ~ age, data = prostate)
###### budget
plot(rr.0 ~ age, data = prostate)
smoothSEcurve(rr.0, age) +
title("Martingale residuals\nversus budget") +
abline(h=0, col = 2)
###### budget
plot(rr.0 ~ age)
rr.0
smoothSEcurve(rr.0, age)
result.0.coxph
heart = hx + ekg %nin% c('normal', 'benign') ###combining variables
label(heart) = 'Heart Disease Code'
map = (2*dbp+sbp)/3
label(map) = 'Mean Arterial Pressure/10' ##comnining vairables
dd = datadist(dd, heart, map) # add combined variables to datadist(dd)
################################################################################
## Compare reduced models with survival model and compare AIC with full model ##
################################################################################
# new model
f2 = cph(S ~ rx + rcs(age,3) + rcs(wt, 3) + pf.coded + heart + rcs(map,3) +
rcs(hg, 4) + rcs(sg, 3) + rcs(sz, 3) + rcs(log(ap), 5) + bm,
x = TRUE, y = TRUE, surv = TRUE, time.inc = 5*12)
print(f2, latex = TRUE, coefs = TRUE)
## Test that all variables are linear ###
latex(anova(f2), file='', label = 'tab:coccase-anova1')
type
View(prostate)
z = predict(f2, type = 'terms')
z
f.short = cph(S ~ z, x = TRUE, y= TRUE)
## Compute shoenfields residuals for each variable
# test the proportional hazard assumption using the cox.zph() function
phtest = cox.zph(f.short, transform = 'identity')
phtest
plot(phtest, var = 'rx')
##* To make it work, the phtest variable should be defined with:
phtest = cox.zph(f.short, transform = 'identity',terms=FALSE)
plot(phtest, var = 'rx')
##* To make it work, the phtest variable should be defined with:
phtest = cox.zph(f.short, transform = 'identity',terms=FALSE)
##** you can then plot the transformations to see the strength of the associations of
##*each variable with all the others. If the R^2 is small, it means the variable is mostly predicted
##*by their median or modal values from the marginal distribution
windows();ggplot(w,scale=TRUE)+theme(axis.text.x=element_text(size=6))
##* To make it work, the phtest variable should be defined with:
phtest = cox.zph(f.short, transform = 'identity',terms=FALSE)
# number alive and dead
prostate %>% count(status)
sum(prostate$status != 'alive', na.rm=TRUE)
table(status)
# is there missing values?????
tibble(prostate) %>%
filter(if_any(everything(), is.na)) # 27 rows with missing data
# predict missing values based on other scores
w = transcan(~ sz + sg + ap + sbp + dbp + age + wt + hg + ekg + pf + bm + hx,
imputed = TRUE, data = prostate, pl = FALSE, pr = FALSE)
w = transcan(~ sz + sg + ap + sbp + dbp + age + wt + hg + ekg + pf + bm + hx,
imputed = TRUE, trantab=TRUE, data = prostate, pl = FALSE, pr = FALSE)
attach(prostate)
sz = impute(w, sz, data = prostate)
sg = impute(w, sg, data = prostate)
age = impute(w, age, data = prostate)
wt = impute(w, wt, data = prostate)
ekg = impute(w, ekg, data = prostate)
dd = datadist(prostate); options(datadist = 'dd')
units(dtime) = 'Month'
# create survival object based of time of death
S = Surv(dtime, status != 'alive')
# perform a cox proportional hazard model on all variables, use restricted cubic
# spline for certain variables
#
f = cph(S ~ rx + rcs(age, 4) + rcs(wt, 4) + pf + hx + rcs(sbp, 4) + rcs(dbp, 4) +
ekg + rcs(hg, 4) + rcs(sg, 4) + rcs(sz, 4) + rcs(log(ap), 4) + bm)
print(f, latex = TRUE, coefs = FALSE)
# 3) would the next step be to investigate which variables are significant in
#   this model and remove those which are not accordingly?
##* you could issue this command to see the strength of association of each predictor
##* and whether nonlinearities are warranted. Overall, there is evidence of nonlinearities
##* of some predictors, and also no evidence of association for some others (e.g. sbp, sg)
anova(f)
heart = hx + ekg %nin% c('normal', 'benign') ###combining variables
label(heart) = 'Heart Disease Code'
map = (2*dbp+sbp)/3
label(map) = 'Mean Arterial Pressure/10' ##comnining vairables
dd = datadist(dd, heart, map) # add combined variables to datadist(dd)
################################################################################
## Compare reduced models with survival model and compare AIC with full model ##
################################################################################
# new model
f2 = cph(S ~ rx + rcs(age,3) + rcs(wt, 3) + pf.coded + heart + rcs(map,3) +
rcs(hg, 4) + rcs(sg, 3) + rcs(sz, 3) + rcs(log(ap), 5) + bm,
x = TRUE, y = TRUE, surv = TRUE, time.inc = 5*12)
print(f2, latex = TRUE, coefs = TRUE)
## Test that all variables are linear ###
latex(anova(f2), file='', label = 'tab:coccase-anova1')
#cant get above code to work
##* This is a known bug. This instruction should be issued before the command:
##* However note that issuing this command will change ALL of the outputs to LaTeX
##* so beware!
options(prType='latex') # options(prType='plain') to restore the default
## Test that all variables are linear ###
latex(anova(f2), file='', label = 'tab:coccase-anova1')
z = predict(f2, type = 'terms')
f.short = cph(S ~ z, x = TRUE, y= TRUE)
## Compute shoenfields residuals for each variable
# test the proportional hazard assumption using the cox.zph() function
phtest = cox.zph(f.short, transform = 'identity')
phtest
plot(phtest, var = 'rx')
##* To make it work, the phtest variable should be defined with:
phtest = cox.zph(f.short, transform = 'identity',terms=FALSE)
plot(phtest, var = 'rx')
abline(c(0,2))
ablineabline(h=0, col = 2)
plot(phtest, var = 'rx')
ablineabline(h=0, col = 2)
abline(h=0, col = 2)
## compare model
#
f.ia = cph(S ~ z.dose * z.other)
z.dose = z[, 1]  # z[,1] get column rx (dose)
z.other = z[, -1] #all other columns
options(prType='plain')
options(prType='latex') # options(prType='plain') to restore the default
latex(anova(f2), file='', label = 'tab:coxcase-anova1')
## compare model
#
f.ia = cph(S ~ z.dose * z.other)
options(prType='latex') # options(prType='plain') to restore the default
latex(anova(f2), file='', label = 'tab:coxcase-anova1')
#
ggplot(predict(f2), sepdiscrete='vertical', nlevels=4, vnames='names')
options(prType='plain')
#
ggplot(predict(f2), sepdiscrete='vertical', nlevels=4, vnames='names')
options(prType='latex') # options(prType='plain') to restore the default
#
ggplot(predict(f2), sepdiscrete='vertical', nlevels=4, vnames='names')
rlang::last_error()
cal = calibrate(f2, B=300, u=5*12, maxdim = 4)
cal
set.seed(1)
v = validate(f2, B=300)
v
print(v)
latex(v, file = '')
options(prType='plain')
latex(v, file = '')
options(prType='latex') # options(prType='plain') to restore the default
latex(v, file = '')
options(prType='plain')
latex(v, file = '')
print(v)
cal = calibrate(f2, B=300, u=5*12, maxdim = 4)
plot(cal)
plot(cal, subtitles = TRUE)
plot(cal, subtitles = FALSE)
cal = calibrate(f2, cmethod = 'KM', u=1, m=60, B=120, pr=FALSE)
plot(cal, add = TRUE)
cal = calibrate(f2, B=300, u=5*12, maxdim = 4)
plot(cal, subtitles = FALSE)
cal = calibrate(f2, cmethod = 'KM')
cal = calibrate(f2, cmethod = 'KM', u = 5*12, B = 120)
plot(cal, add = TRUE)
prostate
plot(summary(f2, ap=c(1,20)), log=TRUE, main = '')
plot(summary(f2, ap=c(1,2)), log=TRUE, main = '')
plot(summary(f2, log=TRUE, main = '')
plot(summary(f2), log=TRUE, main = '')
plot(summary(f2, ap=c(1,20)), log=TRUE, main = '')
Survival(f)
Survival(f2)
prostate
require(rms)
require(tidyverse)
##################
#import test data#
##################
getHdata(prostate)
#combine two levels in EKG column
levels(prostate$ekg)[levels(prostate$ekg) %in% c('old MI', 'recent MI')] = 'MI'
#new column that converts pf data into intger values (1 to 4)
prostate$pf.coded = as.integer(prostate$pf)
# Merge last two levels (levels 3 and 4 as 3)
levels(prostate$pf.coded) = c(levels(prostate$pf.coded)[1:3], levels(prostate$pf.coded)[3])
attach(prostate)
####################
# explore the data #
####################
# total number of patients
nrow(prostate)
# number alive and dead
prostate %>% count(status)
sum(prostate$status != 'alive', na.rm=TRUE)
# is there missing values?????
tibble(prostate) %>%
filter(if_any(everything(), is.na)) # 27 rows with missing data
w = transcan(~ sz + sg + ap + sbp + dbp + age + wt + hg + ekg + pf + bm + hx,
imputed = TRUE, trantab=TRUE, data = prostate, pl = FALSE, pr = FALSE)
summary(w)
attach(prostate)
sz = impute(w, sz, data = prostate)
sg = impute(w, sg, data = prostate)
age = impute(w, age, data = prostate)
wt = impute(w, wt, data = prostate)
ekg = impute(w, ekg, data = prostate)
sg
dd = datadist(prostate); options(datadist = 'dd')
dd = datadist(prostate); options(datadist = 'dd')
dd
ggplot(w,scale=TRUE)+theme(axis.text.x=element_text(size=6))
# create survival object based of time of death
S = Surv(dtime, status != 'alive')
# perform a cox proportional hazard model on all variables, use restricted cubic
# spline for certain variables
#
f = cph(S ~ rx + rcs(age, 4) + rcs(wt, 4) + pf + hx + rcs(sbp, 4) + rcs(dbp, 4) +
ekg + rcs(hg, 4) + rcs(sg, 4) + rcs(sz, 4) + rcs(log(ap), 4) + bm)
print(f, latex = TRUE, coefs = FALSE)
# 3) would the next step be to investigate which variables are significant in
#   this model and remove those which are not accordingly?
##* you could issue this command to see the strength of association of each predictor
##* and whether nonlinearities are warranted. Overall, there is evidence of nonlinearities
##* of some predictors, and also no evidence of association for some others (e.g. sbp, sg)
anova(f)
anova(f2)
heart = hx + ekg %nin% c('normal', 'benign') ###combining variables
label(heart) = 'Heart Disease Code'
map = (2*dbp+sbp)/3
label(map) = 'Mean Arterial Pressure/10' ##comnining vairables
dd = datadist(dd, heart, map) # add combined variables to datadist(dd)
################################################################################
## Compare reduced models with survival model and compare AIC with full model ##
################################################################################
# new model
f2 = cph(S ~ rx + rcs(age,3) + rcs(wt, 3) + pf.coded + heart + rcs(map,3) +
rcs(hg, 4) + rcs(sg, 3) + rcs(sz, 3) + rcs(log(ap), 5) + bm,
x = TRUE, y = TRUE, surv = TRUE, time.inc = 5*12)
anova(f2)
f2
anova(f2)
z = predict(f2, type = 'terms')
z
z = predict(f2, type = 'terms')
f.short = cph(S ~ z, x = TRUE, y= TRUE)
## Compute shoenfields residuals for each variable
# test the proportional hazard assumption using the cox.zph() function
phtest = cox.zph(f.short, transform = 'identity')
phtest
plot(phtest, var = 'rx')
## Compute shoenfields residuals for each variable
# test the proportional hazard assumption using the cox.zph() function
phtest = cox.zph(f.short, transform = 'identity')
phtest
plot(phtest, var = 'rx')
##* To make it work, the phtest variable should be defined with:
phtest = cox.zph(f.short, transform = 'identity',terms=FALSE)
plot(phtest, var = 'rx')
abline(h=0, col = 2)
phtest
plot(phtest, var = 'wt')
abline(h=0, col = 2)
f.short
abline(h=1, col = 2)
plot(phtest, var = 'bm')
abline(h= 0.9988, col = 2)
z.dose = z[, 1]  # z[,1] get column rx (dose)
z.other = z[, -1] #all other columns
## compare model
#
f.ia = cph(S ~ z.dose * z.other)
options(prType='latex') # options(prType='plain') to restore the default
latex(anova(f2), file='', label = 'tab:coxcase-anova1')
options(prType='plain') # options(prType='plain') to restore the default
latex(anova(f2), file='', label = 'tab:coxcase-anova1')
latex(anova(f2), file='', label = 'tab:coxcase-anova1')
f.ia
ggplot(predict(f2), sepdiscrete='vertical', nlevels=4, vnames='names')
#
ggplot(Predict(f2), sepdiscrete='vertical', nlevels=4, vnames='names')
set.seed(1)
v = validate(f2, B=300)
latex(v, file = '')
print(v)
v
cal = calibrate(f2, B=300, u=5*12, maxdim = 4)
plot(cal, subtitles = FALSE)
cal = calibrate(f2, B=300, u=10, maxdim = 4)
plot(cal, subtitles = FALSE)
cal = calibrate(f2, B=300, u=30, maxdim = 4)
plot(cal, subtitles = FALSE)
cal = calibrate(f2, B=300, u=100, maxdim = 4)
cal = calibrate(f2, B=300, u=100, maxdim = 4)
cal = calibrate(f2, B=300, u=70, maxdim = 4)
f2
update(f2, time.inc = 30)
cal = calibrate(f2, B=300, u=30, maxdim = 4)
update(f2, time.inc = 30)
cal = calibrate(f2, B=300, u=30, maxdim = 4)
f2 = update(f2, time.inc = 30)
cal = calibrate(f2, B=300, u=30, maxdim = 4)
plot(cal, subtitles = FALSE)
cal = calibrate(f2, cmethod = 'KM', u = 30, B = 120)
plot(cal, add = TRUE)
plot(summary(f2, ap=c(1,20)), log=TRUE, main = '')
table(status)
table(rx)
table(rx, status != 'alive', na.rm=TRUE)
table(rx, prostate$status != 'alive', na.rm=TRUE)
